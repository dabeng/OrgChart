/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["JSONDigger"] = factory();
	else
		root["JSONDigger"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module) => {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar JSONDigger = /*#__PURE__*/function () {\n  function JSONDigger(datasource, idProp, childrenProp) {\n    _classCallCheck(this, JSONDigger);\n    this.ds = datasource;\n    this.id = idProp;\n    this.children = childrenProp;\n    this.count = 0;\n  }\n  _createClass(JSONDigger, [{\n    key: \"countNodes\",\n    value: function countNodes(obj) {\n      var _this = this;\n      this.count++;\n      if (!obj || !Object.keys(obj).length) {\n        return false;\n      } else {\n        if (obj[this.children]) {\n          obj[this.children].forEach(function (child) {\n            _this.countNodes(child);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"findNodeById\",\n    value: function findNodeById(id) {\n      var _this2 = this;\n      var _this = this;\n      // this.count = 0;\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n        function findNodeById(obj, id, callback) {\n          if (!_this.count) {\n            return;\n          }\n          if (obj[_this.id] === id) {\n            _this.count = 0;\n            callback(null, obj);\n          } else {\n            if (_this.count === 1) {\n              _this.count = 0;\n              callback('The node doesn\\'t exist.', null);\n            }\n            _this.count--;\n            if (obj[_this.children]) {\n              obj[_this.children].forEach(function (node) {\n                findNodeById(node, id, callback);\n              });\n            }\n          }\n        }\n        findNodeById(_this2.ds, id, function (msg, node) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(node);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"matchConditions\",\n    value: function matchConditions(obj, conditions) {\n      var flag = true;\n      Object.keys(conditions).some(function (item) {\n        if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number' || typeof conditions[item] === 'boolean') {\n          if (obj[item] !== conditions[item]) {\n            flag = false;\n            return true;\n          }\n        } else if (conditions[item] instanceof RegExp) {\n          if (!conditions[item].test(obj[item])) {\n            flag = false;\n            return true;\n          }\n        } else if (_typeof(conditions[item]) === 'object') {\n          Object.keys(conditions[item]).some(function (subitem) {\n            switch (subitem) {\n              case '>':\n                {\n                  if (!(obj[item] > conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n                  break;\n                }\n              case '<':\n                {\n                  if (!(obj[item] < conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n                  break;\n                }\n              case '>=':\n                {\n                  if (!(obj[item] >= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n                  break;\n                }\n              case '<=':\n                {\n                  if (!(obj[item] <= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n                  break;\n                }\n              case '!==':\n                {\n                  if (!(obj[item] !== conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n                  break;\n                }\n            }\n          });\n          if (!flag) {\n            return false;\n          }\n        }\n      });\n      return flag;\n    }\n  }, {\n    key: \"findChildren\",\n    value: function () {\n      var _findChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {\n        var _this, parent;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this = this;\n              if (id) {\n                _context.next = 3;\n                break;\n              }\n              throw new Error('Parameter id is invalid.');\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return this.findParent(id);\n            case 6:\n              parent = _context.sent;\n              return _context.abrupt(\"return\", parent[this.children]);\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              throw new Error('The child nodes don\\'t exist.');\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n      function findChildren(_x) {\n        return _findChildren.apply(this, arguments);\n      }\n      return findChildren;\n    }()\n  }, {\n    key: \"findNodes\",\n    value: function findNodes(conditions) {\n      var _this3 = this;\n      var _this = this;\n      this.countNodes(this.ds);\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {\n          var nodes, findNodes;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                findNodes = function _findNodes(obj, conditions, callback) {\n                  if (!_this.count) {\n                    return;\n                  }\n                  if (_this.matchConditions(obj, conditions)) {\n                    nodes.push(obj);\n                    if (_this.count === 1) {\n                      _this.count = 0;\n                      callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                    }\n                  } else {\n                    if (_this.count === 1) {\n                      _this.count = 0;\n                      callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                    }\n                  }\n                  _this.count--;\n                  if (obj[_this.children]) {\n                    obj[_this.children].forEach(function (child) {\n                      findNodes(child, conditions, callback);\n                    });\n                  }\n                };\n                if (!(!conditions || !Object.keys(conditions).length)) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", reject(new Error('Parameter conditions are invalid.')));\n              case 3:\n                nodes = [];\n                findNodes(_this3.ds, conditions, function (msg, nodes) {\n                  if (msg) {\n                    reject(new Error(msg));\n                  } else {\n                    resolve(nodes);\n                  }\n                });\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n        return function (_x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(id) {\n      var _this4 = this;\n      var _this = this;\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n        function findParent(obj, id, callback) {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback('The parent node doesn\\'t exist.', null);\n          } else {\n            _this.count--;\n            if (typeof obj[_this.children] !== 'undefined') {\n              obj[_this.children].forEach(function (child) {\n                if (child[_this.id] === id) {\n                  _this.count = 0;\n                  callback(null, obj);\n                }\n              });\n              obj[_this.children].forEach(function (child) {\n                findParent(child, id, callback);\n              });\n            }\n          }\n        }\n        findParent(_this4.ds, id, function (msg, parent) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(parent);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"findSiblings\",\n    value: function () {\n      var _findSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {\n        var _this, parent;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this = this;\n              if (id) {\n                _context3.next = 3;\n                break;\n              }\n              throw new Error('Parameter id is invalid.');\n            case 3:\n              _context3.prev = 3;\n              _context3.next = 6;\n              return this.findParent(id);\n            case 6:\n              parent = _context3.sent;\n              return _context3.abrupt(\"return\", parent[this.children].filter(function (child) {\n                return child[_this.id] !== id;\n              }));\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](3);\n              throw new Error('The sibling nodes don\\'t exist.');\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 10]]);\n      }));\n      function findSiblings(_x4) {\n        return _findSiblings.apply(this, arguments);\n      }\n      return findSiblings;\n    }()\n  }, {\n    key: \"findAncestors\",\n    value: function findAncestors(id) {\n      var _this = this;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(resolve, reject) {\n          var nodes, findAncestors, _findAncestors, ancestors;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _findAncestors = function _findAncestors3() {\n                  _findAncestors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id) {\n                    var parent;\n                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                      while (1) switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.prev = 0;\n                          if (!(id === _this.ds[_this.id])) {\n                            _context4.next = 7;\n                            break;\n                          }\n                          if (nodes.length) {\n                            _context4.next = 4;\n                            break;\n                          }\n                          throw new Error('The ancestor nodes don\\'t exist.');\n                        case 4:\n                          return _context4.abrupt(\"return\", nodes.slice(0));\n                        case 7:\n                          _context4.next = 9;\n                          return _this.findParent(id);\n                        case 9:\n                          parent = _context4.sent;\n                          nodes.push(parent);\n                          return _context4.abrupt(\"return\", findAncestors(parent[_this.id]));\n                        case 12:\n                          _context4.next = 17;\n                          break;\n                        case 14:\n                          _context4.prev = 14;\n                          _context4.t0 = _context4[\"catch\"](0);\n                          throw new Error('The ancestor nodes don\\'t exist.');\n                        case 17:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }, _callee4, null, [[0, 14]]);\n                  }));\n                  return _findAncestors.apply(this, arguments);\n                };\n                findAncestors = function _findAncestors2(_x7) {\n                  return _findAncestors.apply(this, arguments);\n                };\n                if (id) {\n                  _context5.next = 4;\n                  break;\n                }\n                return _context5.abrupt(\"return\", reject(new Error('Parameter id is invalid.')));\n              case 4:\n                nodes = [];\n                _context5.prev = 5;\n                _context5.next = 8;\n                return findAncestors(id);\n              case 8:\n                ancestors = _context5.sent;\n                resolve(ancestors);\n                _context5.next = 15;\n                break;\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](5);\n                reject(_context5.t0);\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5, null, [[5, 12]]);\n        }));\n        return function (_x5, _x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    // validate the input parameters id and data(could be oject or array)\n  }, {\n    key: \"validateParams\",\n    value: function validateParams(id, data) {\n      if (!id) {\n        throw new Error('Parameter id is invalid.');\n      }\n      if (!data || data.constructor !== Object && data.constructor !== Array || data.constructor === Object && !Object.keys(data).length || data.constructor === Array && !data.length || data.constructor === Array && data.length && !data.every(function (item) {\n        return item && item.constructor === Object && Object.keys(item).length;\n      })) {\n        throw new Error('Parameter data is invalid.');\n      }\n    }\n  }, {\n    key: \"addChildren\",\n    value: function () {\n      var _addChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(id, data) {\n        var parent, _parent$this$children;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              this.validateParams(id, data);\n              _context6.prev = 1;\n              _context6.next = 4;\n              return this.findNodeById(id);\n            case 4:\n              parent = _context6.sent;\n              if (data.constructor === Object) {\n                if (parent[this.children]) {\n                  parent[this.children].push(data);\n                } else {\n                  parent[this.children] = [data];\n                }\n              } else {\n                if (parent[this.children]) {\n                  (_parent$this$children = parent[this.children]).push.apply(_parent$this$children, _toConsumableArray(data));\n                } else {\n                  parent[this.children] = data;\n                }\n              }\n              _context6.next = 11;\n              break;\n            case 8:\n              _context6.prev = 8;\n              _context6.t0 = _context6[\"catch\"](1);\n              throw new Error('Failed to add child nodes.');\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[1, 8]]);\n      }));\n      function addChildren(_x8, _x9) {\n        return _addChildren.apply(this, arguments);\n      }\n      return addChildren;\n    }()\n  }, {\n    key: \"addSiblings\",\n    value: function () {\n      var _addSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(id, data) {\n        var parent, _parent$this$children2;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              this.validateParams(id, data);\n              _context7.prev = 1;\n              _context7.next = 4;\n              return this.findParent(id);\n            case 4:\n              parent = _context7.sent;\n              if (data.constructor === Object) {\n                parent[this.children].push(data);\n              } else {\n                (_parent$this$children2 = parent[this.children]).push.apply(_parent$this$children2, _toConsumableArray(data));\n              }\n              _context7.next = 11;\n              break;\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](1);\n              throw new Error('Failed to add sibling nodes.');\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[1, 8]]);\n      }));\n      function addSiblings(_x10, _x11) {\n        return _addSiblings.apply(this, arguments);\n      }\n      return addSiblings;\n    }()\n  }, {\n    key: \"addRoot\",\n    value: function addRoot(data) {\n      var _this5 = this;\n      var _this = this;\n      if (!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length) {\n        throw new Error('Parameter data is invalid.');\n      }\n      try {\n        this.ds[this.children] = [Object.assign({}, this.ds)];\n        delete data[this.children];\n        Object.keys(this.ds).filter(function (prop) {\n          return prop !== _this5.children;\n        }).forEach(function (prop) {\n          if (!data[prop]) {\n            delete _this5.ds[prop];\n          }\n        });\n        Object.assign(this.ds, data);\n      } catch (err) {\n        throw new Error('Failed to add root node.');\n      }\n    }\n  }, {\n    key: \"updateNode\",\n    value: function () {\n      var _updateNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(data) {\n        var node;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length || data.constructor === Object && Object.keys(data).length && !data[this.id])) {\n                _context8.next = 2;\n                break;\n              }\n              throw new Error('Parameter data is invalid.');\n            case 2:\n              _context8.prev = 2;\n              _context8.next = 5;\n              return this.findNodeById(data[this.id]);\n            case 5:\n              node = _context8.sent;\n              Object.assign(node, data);\n              _context8.next = 12;\n              break;\n            case 9:\n              _context8.prev = 9;\n              _context8.t0 = _context8[\"catch\"](2);\n              throw new Error('Failed to update node.');\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[2, 9]]);\n      }));\n      function updateNode(_x12) {\n        return _updateNode.apply(this, arguments);\n      }\n      return updateNode;\n    }()\n  }, {\n    key: \"updateNodes\",\n    value: function () {\n      var _updateNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(ids, data) {\n        var _this, _iterator, _step, id;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _this = this;\n              if (!(!ids || ids.constructor === Array && !ids.length || !data)) {\n                _context9.next = 3;\n                break;\n              }\n              throw new Error('Input parameter is invalid.');\n            case 3:\n              _context9.prev = 3;\n              _iterator = _createForOfIteratorHelper(ids);\n              _context9.prev = 5;\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context9.next = 14;\n                break;\n              }\n              id = _step.value;\n              data[_this.id] = id;\n              _context9.next = 12;\n              return this.updateNode(data);\n            case 12:\n              _context9.next = 7;\n              break;\n            case 14:\n              _context9.next = 19;\n              break;\n            case 16:\n              _context9.prev = 16;\n              _context9.t0 = _context9[\"catch\"](5);\n              _iterator.e(_context9.t0);\n            case 19:\n              _context9.prev = 19;\n              _iterator.f();\n              return _context9.finish(19);\n            case 22:\n              _context9.next = 27;\n              break;\n            case 24:\n              _context9.prev = 24;\n              _context9.t1 = _context9[\"catch\"](3);\n              throw _context9.t1;\n            case 27:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[3, 24], [5, 16, 19, 22]]);\n      }));\n      function updateNodes(_x13, _x14) {\n        return _updateNodes.apply(this, arguments);\n      }\n      return updateNodes;\n    }() // remove single node based on id\n  }, {\n    key: \"removeNode\",\n    value: function () {\n      var _removeNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(id) {\n        var _this, parent, index, removed;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _this = this;\n              if (!(id === this.ds[this.id])) {\n                _context10.next = 3;\n                break;\n              }\n              throw new Error('Input parameter is invalid.');\n            case 3:\n              _context10.prev = 3;\n              _context10.next = 6;\n              return this.findParent(id);\n            case 6:\n              parent = _context10.sent;\n              index = parent[this.children].map(function (node) {\n                return node[_this.id];\n              }).indexOf(id);\n              removed = parent[this.children].splice(index, 1);\n              this.count = 0;\n              return _context10.abrupt(\"return\", parent);\n            case 13:\n              _context10.prev = 13;\n              _context10.t0 = _context10[\"catch\"](3);\n              throw new Error('Failed to remove node.');\n            case 16:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[3, 13]]);\n      }));\n      function removeNode(_x15) {\n        return _removeNode.apply(this, arguments);\n      }\n      return removeNode;\n    }() // param could be single id, id array or conditions object\n  }, {\n    key: \"removeNodes\",\n    value: function () {\n      var _removeNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(param) {\n        var _this, _iterator2, _step2, p, _nodes, ids, _iterator3, _step3, _p;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _this = this;\n              if (!(!param || param.constructor === Array && !param.length || param.constructor === Object && !Object.keys(param).length)) {\n                _context11.next = 3;\n                break;\n              }\n              throw new Error('Input parameter is invalid.');\n            case 3:\n              _context11.prev = 3;\n              if (!(param.constructor === String || param.constructor === Number)) {\n                _context11.next = 9;\n                break;\n              }\n              _context11.next = 7;\n              return this.removeNode(param);\n            case 7:\n              _context11.next = 50;\n              break;\n            case 9:\n              if (!(param.constructor === Array)) {\n                _context11.next = 29;\n                break;\n              }\n              // if passing in id array\n              _iterator2 = _createForOfIteratorHelper(param);\n              _context11.prev = 11;\n              _iterator2.s();\n            case 13:\n              if ((_step2 = _iterator2.n()).done) {\n                _context11.next = 19;\n                break;\n              }\n              p = _step2.value;\n              _context11.next = 17;\n              return this.removeNode(p);\n            case 17:\n              _context11.next = 13;\n              break;\n            case 19:\n              _context11.next = 24;\n              break;\n            case 21:\n              _context11.prev = 21;\n              _context11.t0 = _context11[\"catch\"](11);\n              _iterator2.e(_context11.t0);\n            case 24:\n              _context11.prev = 24;\n              _iterator2.f();\n              return _context11.finish(24);\n            case 27:\n              _context11.next = 50;\n              break;\n            case 29:\n              _context11.next = 31;\n              return this.findNodes(param);\n            case 31:\n              _nodes = _context11.sent;\n              ids = _nodes.map(function (node) {\n                return node[_this.id];\n              });\n              _iterator3 = _createForOfIteratorHelper(ids);\n              _context11.prev = 34;\n              _iterator3.s();\n            case 36:\n              if ((_step3 = _iterator3.n()).done) {\n                _context11.next = 42;\n                break;\n              }\n              _p = _step3.value;\n              _context11.next = 40;\n              return this.removeNode(_p);\n            case 40:\n              _context11.next = 36;\n              break;\n            case 42:\n              _context11.next = 47;\n              break;\n            case 44:\n              _context11.prev = 44;\n              _context11.t1 = _context11[\"catch\"](34);\n              _iterator3.e(_context11.t1);\n            case 47:\n              _context11.prev = 47;\n              _iterator3.f();\n              return _context11.finish(47);\n            case 50:\n              _context11.next = 55;\n              break;\n            case 52:\n              _context11.prev = 52;\n              _context11.t2 = _context11[\"catch\"](3);\n              throw new Error('Failed to remove nodes.');\n            case 55:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[3, 52], [11, 21, 24, 27], [34, 44, 47, 50]]);\n      }));\n      function removeNodes(_x16) {\n        return _removeNodes.apply(this, arguments);\n      }\n      return removeNodes;\n    }()\n  }]);\n  return JSONDigger;\n}();\n;\nmodule.exports = JSONDigger;\n\n//# sourceURL=webpack://JSONDigger/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});